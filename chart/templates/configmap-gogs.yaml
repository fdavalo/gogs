apiVersion: v1
kind: ConfigMap
metadata:
  name: gogs-files
data:
    app.ini: |
      RUN_MODE = prod
      RUN_USER = gogs
      [database]
      DB_TYPE  = postgres
      HOST     = gogs-postgresql:5432
      NAME     = gogs
      USER     = gogs
      PASSWD   = gogs
      [repository]
      ROOT = /opt/gogs/data/repositories
      [server]
      ROOT_URL=http://@HOSTNAME
      SSH_DOMAIN=@HOSTNAME
      [security]
      INSTALL_LOCK = true
      [service]
      ENABLE_CAPTCHA = false
      [webhook]
      SKIP_TLS_VERIFY = true   
    init-gogs.py: |
      #!/usr/bin/env python3
      import os
      import requests 
      gogs_user = "gogs"
      gogs_pwd = "gogs"
      gogsURL = "http://" + os.popen('oc get svc gogs -o template --template="{{.spec.clusterIP}}"').read() + ":3000"
      # create admin user
      done = True
      data_user = {
      'user_name': gogs_user,
      'password': gogs_pwd,
      'retype': gogs_pwd,
      'email': 'admin@gogs.com'
      }
      resp = requests.post(url = gogsURL + "/user/sign_up", data = data_user) 
      if resp.status_code != 200:
        print("Error creating Gogs admin (status code: {})".format(resp.status_code))
        print(resp.content)
        done = False
      else:
        print("Created admin user {}:{}".format(gogs_user, gogs_pwd))

      data_org = {
        "username": "gogs",
        "full_name": "Gogs",
        "description": "Gogs is a painless self-hosted Git Service.",
        "website": "https://gogs.io",
        "location": "USA"
      }
      resp = requests.post(url = gogsURL + "/admin/users/gogs/orgs", data = data_org) 
      if resp.status_code != 200:
        print("Error creating Gogs org (status code: {})".format(resp.status_code))
        print(resp.content)
        done = False
      else:
        print("Created org {}:{}".format(gogs_user, gogs_pwd))

      # create git repo spring-petclinic
      data_repo = '{"clone_addr": "https://github.com/siamaksade/spring-petclinic", "uid": 1, "repo_name": "spring-petclinic"}'
      headers = {'Content-Type': 'application/json'}
      resp = requests.post(url = gogsURL + "/api/v1/repos/migrate", headers = headers, auth = (gogs_user, gogs_pwd), data = data_repo)  
      if resp.status_code != 200 and resp.status_code != 201:
        print("Error creating git repo (status code: {})".format(resp.status_code))
        print(resp.content)
        done = False
      else:
        print("Created git repo spring-petclinic")

      if done:
        file = open("/opt/gogs/data/init-gogs.done", "w")
        file.write("done")
        file.close()
